#include <stdio.h>

void print_bit_representation(unsigned char x){
	unsigned char tmp = x;
	// note -- the left shift **does** rely on casting to an unsigned type
	// Efe will be happy!
	unsigned char mask = (~0b0) ^ ((unsigned char)(~0b0) >> 1); // left shift here after casting
	unsigned char width = (~0b0);
	
	fprintf(stdout, "%x\n", mask);
	
	while (width != 0){
		if ((mask & tmp) == 0){ // that bit is 0
			fprintf(stdout, "0");
		} else{fprintf(stdout, "1");}
		tmp <<= 1;
		width <<= 1;
	} fprintf(stdout, "\n");
}

int main() {
	char c = 'C';
	char s = 'S';
	int x = 67;
	int y = 83;
	
	printf("%d\n", c^s);
	printf("%d\n",x^y);
}